import * as THREE from 'three';
import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
import { CSS2DRenderer, CSS2DObject } from 'three/addons/renderers/CSS2DRenderer.js';
const scene = new THREE.Scene();
const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);
const labelRenderer = new CSS2DRenderer();
labelRenderer.setSize(window.innerWidth, window.innerHeight);
labelRenderer.domElement.style.position = 'absolute';
labelRenderer.domElement.style.top = '0px';

document.body.appendChild(labelRenderer.domElement);
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
camera.position.set(10, 5, 20);
const geometry = new THREE.BoxGeometry(1, 1, 1);
const material = new THREE.MeshBasicMaterial({ color: 0x55ff66 });
const geometryLabel = document.createElement('div');
geometryLabel.className = 'label';
geometryLabel.textContent = 'Earth';
geometryLabel.style.color = 0xffffff;
geometryLabel.style.backgroundColor = 'transparent';
const moon = new THREE.Mesh(geometry, material);
moon.layers.enableAll();
const moonLabelObject = new CSS2DObject(geometryLabel);
moonLabelObject.position.set(1.5 * 6, 0, 0);
moonLabelObject.center.set(0, 1);

moonLabelObject.layers.set(0);
moon.add(moonLabelObject);
scene.add(moon);
renderer.render(scene, camera);
const controls = new OrbitControls(camera, labelRenderer.domElement);
controls.minDistance = 5;
controls.maxDistance = 100;
